::

           _..--""-.                  .-""--.._
       _.-'         \ __...----...__ /         '-._
     .'      .:::...,'              ',...:::.      '.
    (     .'``'''::;                  ;::'''``'.     )
     \             '-)              (-'             /
      \             /                \             /
       \          .'.-.            .-.'.          /
        \         | \0|            |0/ |         /
        |          \  |   .-==-.   |  /          |
         \          `/`;          ;`\`          /
          '.._      (_ |  .-==-.  | _)      _..'
              `"`"-`/ `/'        '\` \`-"`"`
                   / /`;   .==.   ;`\ \\
             .---./_/   \  .==.  /   \ \\
            / '.    `-.__)       |    `"
           | =(`-.        '==.   ;
            \  '. `-.           /
             \_:_)   `"--.....-'



A Log Query analyzer for PostgreSQL
=====================================
Point the command line tool to a single PostgreSQL csv log file or a log 
directory to import the contents and run analytics on the queries.

This tool allows you to display a table with the following filters:

* **Slowest:** Displays a block of queries ordered by slowest descending.
* **Usage:**   Displays the list of queries ordered by the amount of times
  used.
* **Weight:**  Basically (time to execute x times used)

Configuring PostgreSQL for query analisis
-----------------------------------------
One of the things needed before hand is to properly configure PostgreSQL to
output logs in CSV format so that the analizer can properly import data.

I know, weird - but it is a nice way to properly import the queries and parse
the things needed to display them later.

These are the configuration options with explaining comments on what they do

::

    #------------------------------------------------------------------------------
    # ERROR REPORTING AND LOGGING
    #------------------------------------------------------------------------------

    # - Where to Log -

    log_destination = 'csvlog'      # Valid values are combinations of
                        # stderr, csvlog, syslog, and eventlog,
                        # depending on platform.  csvlog
                        # requires logging_collector to be on.

    # This is used when logging to stderr:
    logging_collector = on      # Enable capturing of stderr and csvlog
                        # into log files. Required to be on for
                        # csvlogs.
                        # (change requires restart)

    # These are only used if logging_collector is on:
    log_directory = 'pg_log'        # directory where log files are written,
                        # can be absolute or relative to PGDATA

    # Modify this as necessary, the pattern does not matter for the importer
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log' # log file name pattern,


Debug messages
--------------
This tool uses proper logging to output information to the terminal, you can
set the logging level desire by passing a value to ``-l`` or ``--logging-level``.
Acceptable values for that flag are:

* debug
* warning
* critical
* info

By default it will use ``INFO`` level.


Importing
---------
Either use the full path to a single CSV file from the output generated by
PostgreSQL or a directory. Both ``-i`` or ``--import`` should work ::

    guaman -i /path/to/postgresql/csv


Reporting
---------
The ``report`` command takes a few different arguments: ``all``, ``weight``,
``slowest`` and ``usage``.

As described in the main paragraph, it will output information in a descending
ordered list of queries **with** hashes that can later be used to show the
complete information gathered from a single query.

Single query reporting
----------------------
If there is a need to display all the information gathered by a single query,
this can be achieved by passing in the hash (always displayed when showing any
table) to the ``show`` command.

The SQL will get parsed and displaed nicely, in addition to that you should
expect to see the following information along with it:

* Full Hash
* Timestamp
* User
* Database
* Open (status of the connection)
* Status
* Error Code
* Error
* Duration (in seconds)
* Times ran
* Full Query

Help
----
Any of: ``-h``, ``--help``, ``help`` will work to trigger the Help menu.
Similarly, to know what version you are using: ``-v``, ``--version`` or
``version`` should work.


License
-------

MIT
Copyright (c) 2012 Alfredo Deza <alfredodeza [at] gmail [dot] com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

